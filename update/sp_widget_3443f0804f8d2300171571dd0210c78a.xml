<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $http, $timeout, $location) {
  /* widget controller */
  var c = this;
	
	var opts = {
		// Whether to scan continuously for QR codes. If false, use scanner.scan() to manually scan.
		// If true, the scanner emits the "scan" event when a QR code is scanned. Default true.
		continuous: true,

		// The HTML element to use for the camera's video preview. Must be a <video> element.
		// When the camera is active, this element will have the "active" CSS class, otherwise,
		// it will have the "inactive" class. By default, an invisible element will be created to
		// host the video.
		video: document.getElementById('preview'),

		// Whether to horizontally mirror the video preview. This is helpful when trying to
		// scan a QR code with a user-facing camera. Default true.
		mirror: false,

		// Whether to include the scanned image data as part of the scan result. See the "scan" event
		// for image format details. Default false.
		captureImage: false,

		// Only applies to continuous mode. Whether to actively scan when the tab is not active.
		// When false, this reduces CPU usage when the tab is not active. Default true.
		backgroundScan: true,

		// Only applies to continuous mode. The period, in milliseconds, before the same QR code
		// will be recognized in succession. Default 5000 (5 seconds).
		refractoryPeriod: 5000,

		// Only applies to continuous mode. The period, in rendered frames, between scans. A lower scan period
		// increases CPU usage but makes scan response faster. Default 1 (i.e. analyze every frame).
		scanPeriod: 10
	};
	
	var scanner = new Instascan.Scanner(opts);
	
	scanner.addListener('active', function (content) {
		console.log("**instascan is active");
	});
	scanner.addListener('inactive', function (content) {
		console.log("**instascan is inactive");
	});
	scanner.addListener('scan', function (content) {
		console.log("**instascan found " + content);
		$location.search('id=xr_viewer&sys_id=' + encodeURIComponent(content));
	});
	Instascan.Camera.getCameras().then(function (cameras) {
		if (cameras.length > 0) {
			scanner.start(cameras[0]);
			console.log("**instascan started");
		} else {
			console.error('**instascan No cameras found.');
		}
	});
}]]></client_script>
        <controller_as>c</controller_as>
        <css>#preview {
  width: 600px;
  height: 600px;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>xr-viewer-scanner</id>
        <internal>false</internal>
        <link/>
        <name>XR Viewer Scanner</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {  /* populate the 'data' object */  /* e.g., data.table = $sp.getValue('table'); */})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>syvon</sys_created_by>
        <sys_created_on>2018-10-04 15:22:54</sys_created_on>
        <sys_id>3443f0804f8d2300171571dd0210c78a</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>XR Viewer Scanner</sys_name>
        <sys_package display_value="OAB IR Asset Viewer POC" source="x_12167_oab_ir_ass">fd05fe93dbb42300656053184b961908</sys_package>
        <sys_policy/>
        <sys_scope display_value="OAB IR Asset Viewer POC">fd05fe93dbb42300656053184b961908</sys_scope>
        <sys_update_name>sp_widget_3443f0804f8d2300171571dd0210c78a</sys_update_name>
        <sys_updated_by>syvon</sys_updated_by>
        <sys_updated_on>2018-10-05 06:13:04</sys_updated_on>
        <template><![CDATA[<video id="preview"></video>]]></template>
    </sp_widget>
</record_update>
